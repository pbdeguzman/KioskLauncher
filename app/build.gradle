plugins {
    id 'com.android.application'
}

def propertiesFile = rootProject.file('app/keys.properties')
def keyProperties = new Properties()
keyProperties.load(new FileInputStream(propertiesFile))

android {
    namespace 'com.priv.upakiosk'
    compileSdk 33

    defaultConfig {
        applicationId 'com.priv.upakiosk'
        targetSdk 33
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        signingConfig signingConfigs.debug
        splits {
            abi {
                enable true
                reset()
                include 'armeabi-v7a'

                universalApk false
            }
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        debug {
            storeFile file(keyProperties['STORE_FILE'])
            storePassword keyProperties['STORE_PASSWORD']
            keyAlias keyProperties['KEY_ALIAS']
            keyPassword keyProperties['KEY_PASSWORD']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            versionNameSuffix ".release"
        }

        debug {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules-debug.pro'
            minifyEnabled false
            testCoverageEnabled true
            signingConfig signingConfigs.debug
            versionNameSuffix ".debug"
        }

        devt {
            minifyEnabled true
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-devt.pro'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            versionNameSuffix ".devt"
        }
    }

    sourceSets { main { assets.srcDirs = ['src/main/assets', 'src/main/assets/'] } }

    flavorDimensions "vendor"
    productFlavors {
        // VENDOR
        VENDOR_NAME_ {
            dimension "vendor"
            versionNameSuffix "-VENDOR_NAME"
            minSdk MINSDK
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    variantFilter { variant ->
        def needed = variant.name in [
                'VENDOR_NAME_Debug',
                'VENDOR_NAME_Devt',
                'VENDOR_NAME_Release',
        ]
        setIgnore(!needed)
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "UPA-Kiosk-${versionName}.apk"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir:'libs')

    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.appcompat:appcompat:1.5.0'
    implementation 'androidx.recyclerview:recyclerview:1.3.2'
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.2.0-alpha01"
    implementation 'com.google.code.gson:gson:2.8.9'

    implementation (platform("org.jetbrains.kotlin:kotlin-bom:1.8.0"))

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    if (findProject(':CompatibilityLayer')) {
        api project(':CompatibilityLayer')
    } else {
        debugImplementation ('com.global.cl:CompatibilityLayer-debug:1.0@aar') {
            transitive = true;
        }
        devtImplementation ('com.global.cl:CompatibilityLayer-devt:1.0@aar') {
            transitive = true;
        }
        releaseImplementation ('com.global.cl:CompatibilityLayer-release:1.0@aar') {
            transitive = true;
        }
    }

    if (findProject(':Platform_Module')) {
        api project(':Platform_Module')
    } else {
        debugImplementation 'com.global.fb.platform:Platform_Module-debug:1.0@aar'
        devtImplementation 'com.global.fb.platform:Platform_Module-devt:1.0@aar'
        releaseImplementation 'com.global.fb.platform:Platform_Module-release:1.0@aar'
    }

    if (findProject(':HUDS_Module')) {
        api project(':HUDS_Module')
    } else {
        debugImplementation 'com.global.fb.huds:HUDS_Module-debug:1.0@aar'
        devtImplementation 'com.global.fb.huds:HUDS_Module-devt:1.0@aar'
        releaseImplementation 'com.global.fb.huds:HUDS_Module-release:1.0@aar'
    }
}

allprojects {
    afterEvaluate { project ->
        android.applicationVariants.all {
            variant ->
                task("${variant.name}") {}
                tasks."generate${variant.name.capitalize()}Resources".dependsOn("${variant.name}")
        }
    }
}
